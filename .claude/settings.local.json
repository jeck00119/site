{
  "permissions": {
    "allow": [
      "Bash(pip install:*)",
      "Bash(pip show:*)",
      "Bash(python:*)",
      "Bash(E:\\.venv\\Scripts\\python.exe:*)",
      "Bash(\"E:\\site\\.venv\\Scripts\\python.exe\" \"E:\\site\\backend-flask\\main.py\")",
      "Bash(pip uninstall:*)",
      "Bash(mv:*)",
      "Bash(rm:*)",
      "Bash(curl:*)",
      "Bash(npm run dev:*)",
      "Bash(node:*)",
      "Bash(npm install:*)",
      "Bash(npm run build:*)",
      "Bash(chmod:*)",
      "Bash(mkdir:*)",
      "Bash(ls:*)",
      "Bash(restart_backend_fixed.bat)",
      "Bash(cmd:*)",
      "Bash(if exist test_cors_fix.py del test_cors_fix.py)",
      "Bash(git config:*)",
      "Bash(git add:*)",
      "Bash(git rm:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git lfs:*)",
      "Bash(dir)",
      "Bash(python:*)",
      "Bash(venvScripts:*)",
      "Bash(venv\\Scripts\\activate.bat:*)",
      "Bash(ls:*)",
      "Bash(echo)",
      "Bash(timeout:*)",
      "Bash(venv/Scripts/python:*)",
      "Bash(../venv/Scripts/python -c \"import tinydb\")",
      "Bash(venv/Scripts/pip install:*)",
      "Bash(rm:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(find:*)",
      "Bash(true)",
      "Bash(npx eslint:*)",
      "Bash(sed:*)",
      "Bash(dir:*)",
      "Bash(start_backend.bat)",
      "Bash(../venv/Scripts/python:*)",
      "Bash(cat:*)",
      "Bash(grep:*)",
      "Bash(cp:*)",
      "Bash(E:sitevenvScriptspython.exe test_atomic_config_switching.py)",
      "Bash(\"E:\\site\\venv\\Scripts\\python.exe\" test_atomic_config_switching.py)",
      "Bash(rd:*)",
      "Bash(git clone:*)",
      "Bash(npm run type-check:*)",
      "Bash(npx vue-tsc:*)",
      "Bash(if [ -f backend-flask/app.log ])",
      "Bash(else echo \"File not found\")",
      "Bash(fi)",
      "Bash(E:/site/venv/Scripts/python -c \"from services.cnc.cnc_error_handler import CncErrorHandler; print(''Error handler test:'', CncErrorHandler.get_error_message(''GRBL'', ''error:1''))\")",
      "Bash(E:/site/venv/Scripts/python -c \"from services.cnc.cnc_machine_marlin import ERROR_LIST_CNC; print(''Marlin errors imported:'', len(ERROR_LIST_CNC))\")",
      "Bash(E:/site/venv/Scripts/python -c \"from backend-flask.services.cnc.cnc_error_handler import CncErrorHandler; print(''GRBL errors imported:'', len(CncErrorHandler.GRBL_ERROR_LIST)); print(''Marlin errors imported:'', len(CncErrorHandler.MARLIN_ERROR_LIST)); print(''GRBL instructions imported:'', len(CncErrorHandler.GRBL_INSTRUCTIONS))\")",
      "Bash(E:/site/venv/Scripts/python -c \"from services.cnc.cnc_error_handler import CncErrorHandler; print(''GRBL errors imported:'', len(CncErrorHandler.GRBL_ERROR_LIST)); print(''Marlin errors imported:'', len(CncErrorHandler.MARLIN_ERROR_LIST)); print(''GRBL instructions imported:'', len(CncErrorHandler.GRBL_INSTRUCTIONS))\")",
      "Bash(E:/site/venv/Scripts/python -c \"from services.cnc.cnc_machine_marlin import CncMachineMarlin, ERROR_LIST_CNC; print(''Marlin error list imported:'', len(ERROR_LIST_CNC))\")",
      "Bash(E:/site/venv/Scripts/python:*)",
      "Bash(npm outdated)",
      "Bash(npm audit:*)",
      "WebSearch",
      "Bash(npx depcheck:*)",
      "Bash(npm uninstall:*)",
      "Bash(npm update:*)",
      "Bash(npm ls:*)",
      "Bash(bash:*)",
      "Bash(npm view:*)",
      "Bash(for:*)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(done)",
      "Bash(do echo \"Processing $file...\")",
      "Bash(echo \"Found old pattern in $file\")",
      "Bash(echo:*)",
      "Bash(do echo \"Checking CSS in $file...\")",
      "Bash(del check_notifications.py)",
      "Bash(git checkout:*)",
      "Bash(E:sitevenvScriptspython -c \"import sys; sys.path.append(''E:/site/backend-flask''); from services.camera.camera_service import CameraService; cs = CameraService(); print(''Initialized cameras:'', list(cs.cameras.keys()))\")",
      "Bash(\"E:\\site\\venv\\Scripts\\python.exe\" -c \"import sys; sys.path.append(''E:/site/backend-flask''); from services.camera.camera_service import CameraService; cs = CameraService(); print(''Initialized cameras:'', list(cs.cameras.keys()))\")",
      "Bash(./venv/Scripts/python.exe --version)",
      "Bash(./venv/Scripts/python.exe -c \"import sys; sys.path.append(''./backend-flask''); from services.camera.camera_service import CameraService; cs = CameraService(); print(''Initialized cameras:'', list(cs.cameras.keys())); print(''Camera repository has:'', len(cs.camera_repository.read_all()), ''camera configs'')\")",
      "Bash(./venv/Scripts/python.exe -c \"\nimport sys\nsys.path.append(''./backend-flask'')\nfrom services.configurations.configurations_service import ConfigurationsService\nfrom services.configurations.configuration_cache import ConfigurationCache\n\nconfig_service = ConfigurationsService()\ncache = ConfigurationCache()\ncurrent_config = cache.get_cached_config()\n\nif current_config:\n    print(''Current config UID:'', current_config)\n    print(''Config cache directory:'', config_service.get_config_directory(current_config))\nelse:\n    print(''No configuration loaded'')\n    print(''Available configs:'', config_service.get_available_configurations())\n\")",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_type",
      "mcp__playwright__browser_take_screenshot",
      "mcp__playwright__browser_close",
      "mcp__playwright__browser_snapshot",
      "mcp__playwright__browser_evaluate",
      "Bash(git log:*)"
    ],
    "deny": [],
    "defaultMode": "acceptEdits",
    "additionalDirectories": [
      "E:\\e",
      "C:\\c\\Users\\andre\\Desktop"
    ]
  }
}